
## The package attribute specifies a binstar package namespace to build the package to.
## This can be specified here or on the command line
package: metadatastore

## You can also specify the account to upload to,
## you must be an admin of that account, this
## defaults to your user account
user: lightsource2

#===============================================================================
# Build Matrix Options
# These options may be a single item, a list or empty
# The resulting number of builds is [platform * engine * env]
#===============================================================================

## The platforms to build on.
## platform defaults to linux-64
platform:
- linux-64
- osx-64
## The engine are the inital conda packages you want to run with
engine:
- python=2
- python=3
## The env param is an environment variable list
# env:
#  - MY_ENV=A CC=gcc
#  - MY_ENV=B

#===============================================================================
# Script options
# These options may be broken out into the before_script, script and after_script
# or not, that is up to you
#===============================================================================

install:
#  - conda install binstar pip setuptools nose pyyaml six pytz numpy coverage
#  - apt-get install mongo
#test:
#  - conda info -e
#  - source activate /home/binstar/env
#  - conda list
#  - ls /home/binstar/env
#  - python setup.py develop
#
#  - python run_tests.py
## Run before the script
# before_script:
#   - echo "before_script!"
## Put your main computations here!
script:
  - echo "This is my binstar build!"
  - conda config --add channels lightsource2
  - conda install nslsii_dev_configuration
  - conda build conda-recipe/
## This will run after the script regardless of the result of script
### BINSTAR_BUILD_RESULT=[succcess|failure]
## after_script:
#   - echo "The build was a $BINSTAR_BUILD_RESULT" | tee artifact1.txt
## This will be run only after a successful build
# after_success:
#   - echo "after_success!"
## This will be run only after a build failure
# after_failure:
#   - echo "after_failure!"

#===============================================================================
# Build Results
# Build results are split into two categories: artifacts and targets
# You may omit either key and stiff have a successful build
# They may be a string, list and contain any bash glob
#===============================================================================

## Build Targets: Upload these files to your binstar package
## build targets may be a list of files (globs allows) to upload
## The special build targets 'conda' and 'pypi' may be used to
## upload conda builds
## e.g. conda is an alias for /opt/anaconda/conda-bld/<os-arch>/*.tar.bz2
build_targets:
 - conda
